https://selftaughtcoders.com/from-idea-to-launch/lesson-17/laravel-5-mvc-application-in-10-minutes/

https://artisansweb.net/better-way-creating-laravel-controller-crud-operations/
Buliding laravel Application:

http://developers.ph/laravel-framework/laravel-5/how-to-setup-multiple-environment-for-laravel-5-developers-way/

https://laracasts.com/discuss/channels/laravel/where-does-artisan-makeauth-set-the-routes?page=1
https://laracasts.com/discuss/channels/laravel/routehas
https://laracasts.com/discuss/channels/laravel/routes-of-routeauth-function?page=1

https://scotch.io/tutorials/creating-a-laravel-404-page-using-custom-exception-handlers

Model directory:
https://laravel.io/forum/10-26-2014-laravel-5-where-is-the-models-folder

The Model:
Models are all stored in the main app directory, so that command will generate an app/Car.php model file:after (Created Migration: 2018_08_09_061901_create_cars_table):
 'php artisan make:model Car --migration'

Due to Laravel’s built-in model functionality, just by creating an empty model class, Laravel will assume that this model is associated with a database table named cars.

And, actually, by supplying that --migration option when generating the model, Laravel also generated a database migration file for creating that cars database table. The migration file is located at [timestamp]_create_cars_table.php and contains the following code:

.can modify the migration before actually running migrate command to execute it:
in my case, i added following properties to migration file:(say, store the cars’ make, model, and production date:)
 $table->string('make');
$table->string('model');
$table->date('produced_on');

& then, can run the migration to create the cars table using the following Artisan command:
php artisan migrate

The Controller:
In Laravel, a type of object — such as a Car, in this case — is referred to as a resource.
Since it’s so common to build applications around resources, you can generate a resource controller — a controller to handle all requests related to a resource — using another simple Artisan command:

'php artisan make:controller CarController --resource'
That will generate an app/Http/Controllers/CarController.php controller file
--resource -> we can generate a controller with pre-defined methods. And just by writing a single route Laravel automatically call the appropriate methods.

The Routes:
(routes/web.php)
Route::resource('cars', 'CarController');

this resourceful route will create multiple routes to handle different actions. Now, to get the details about the actions, run the command :
php artisan route:list

Request-Type	        Path	            Action	        Route-Name
GET	                    /cars	            index	        cars.index
GET	                    /cars/create	    create	        cars.create
POST	                /cars	            store	        cars.store
GET	                    /cars/{car}	        show	        cars.show
GET	                    /cars/{car}/edit	edit	        cars.edit
PUT/PATCH	            /cars/{car}	        update	        cars.update
DELETE	                /cars/{car}	        destroy	        cars.destroy

The View:
can refer link above all.

php artisan make:auth

Route::has('login----can be anything'):
It just checks if the given route name is a registered route. For example...
Route::get('login', function() {
    // ...
})->name('login');
If that name() doesn't exist, then the has() call would return false. This would be more useful when you don't actually load all your routes with every request.